{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","results","setResults","query","setQuery","input","setInput","loading","setLoading","error","setError","home","setHome","searchInputRef","useRef","useEffect","fetchData","a","axios","get","response","data","hits","className","onSubmit","e","preventDefault","type","onChange","target","value","ref","onClick","current","focus","JSON","stringify","map","result","key","objectID","id","href","url","title","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"+OAGe,SAASA,IAAO,IAAD,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,OAEHF,mBAAS,IAFN,mBAEtBG,EAFsB,KAEfC,EAFe,OAGHJ,mBAAS,MAHN,mBAGtBK,EAHsB,KAGfC,EAHe,OAICN,oBAAS,GAJV,mBAItBO,EAJsB,KAIbC,EAJa,OAKHR,mBAAS,MALN,mBAKtBS,EALsB,KAKfC,EALe,OAMLV,oBAAS,GANJ,mBAMtBW,EANsB,KAMhBC,EANgB,KAQvBC,EAAiBC,mBAEvBC,qBAAU,WACTC,MACE,IAEH,IAQMA,EAAS,uCAAG,4BAAAC,EAAA,6DACjBT,GAAW,GADM,kBAGOU,IAAMC,IAV1BR,EACG,uDAEA,8CAAN,OAAqDR,IAIrC,OAGViB,EAHU,OAIhBlB,EAAWkB,EAASC,KAAKC,MACzBhB,EAASH,GALO,gDAOhBO,EAAS,EAAD,IAPQ,QASjBF,GAAW,GACXI,GAAQ,GAVS,yDAAH,qDAsBf,OACC,yBAAKW,UAAU,gEACd,wBAAIA,UAAU,kCAAd,eACA,0BAAMA,UAAU,YAAYC,SAZT,SAACC,GACrBA,EAAEC,iBACFV,MAWE,2BACCO,UAAU,8CACVI,KAAK,OACLC,SAAU,SAACH,GAAD,OAAOrB,EAASqB,EAAEI,OAAOC,QACnCA,MAAO3B,EACP4B,IAAKlB,IAEN,4BACCU,UAAU,mFACVI,KAAK,UAFN,UAKA,4BACCJ,UAAU,mFACVI,KAAK,SACLK,QAxBsB,SAACP,GAC1BrB,EAAS,IACTS,EAAeoB,QAAQC,UAmBrB,UAOA7B,EACA,wBAAIkB,UAAU,uBAAd,sBACqBlB,GAAS8B,KAAKC,UAAU/B,EAAO,KAAM,GAD1D,KAIA,GAEAE,EACA,yBAAKgB,UAAU,4BAAf,qCAIA,wBAAIA,UAAU,gBACZtB,EAAQoC,KAAI,SAACC,GAAD,OACZ,wBACCf,UAAU,0DACVgB,IAAKD,EAAOE,SACZC,GAAIH,EAAOE,UACX,uBACCjB,UAAU,oCACVmB,KAAMJ,EAAOK,KACZL,EAAOM,YAMZnC,GAAS,6BAAMA,EAAMoC,UCrFLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACtD,EAAD,OAEDuD,SAASC,eAAe,SD0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMoC,c","file":"static/js/main.882493d9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nexport default function App() {\n\tconst [results, setResults] = useState([]);\n\tconst [query, setQuery] = useState('');\n\tconst [input, setInput] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\tconst [home, setHome] = useState(true);\n\n\tconst searchInputRef = useRef();\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, []);\n\n\tconst checkHome = () => {\n\t\tif (home) {\n\t\t\treturn `https://hn.algolia.com/api/v1/search?tags=front_page`;\n\t\t} else {\n\t\t\treturn `https://hn.algolia.com/api/v1/search?query=${query}`;\n\t\t}\n\t};\n\n\tconst fetchData = async () => {\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tconst response = await axios.get(checkHome());\n\t\t\tsetResults(response.data.hits);\n\t\t\tsetInput(query);\n\t\t} catch (err) {\n\t\t\tsetError(err);\n\t\t}\n\t\tsetLoading(false);\n\t\tsetHome(false);\n\t};\n\n\tconst handleSearch = (e) => {\n\t\te.preventDefault();\n\t\tfetchData();\n\t};\n\tconst handleClearSearch = (e) => {\n\t\tsetQuery('');\n\t\tsearchInputRef.current.focus();\n\t};\n\n\treturn (\n\t\t<div className='container max-w-md mx-auto p-4 m-2 bg-gray-300 flex flex-col'>\n\t\t\t<h1 className='text-grey-800 font-medium mb-4'>H - N E W S</h1>\n\t\t\t<form className='mb-8 flex' onSubmit={handleSearch}>\n\t\t\t\t<input\n\t\t\t\t\tclassName='border-2 border-gray-400 flex-auto m-2 ml-0'\n\t\t\t\t\ttype='text'\n\t\t\t\t\tonChange={(e) => setQuery(e.target.value)}\n\t\t\t\t\tvalue={query}\n\t\t\t\t\tref={searchInputRef}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName='flex-auto bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded m-2'\n\t\t\t\t\ttype='submit'>\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='flex-auto bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded m-2'\n\t\t\t\t\ttype='button'\n\t\t\t\t\tonClick={handleClearSearch}>\n\t\t\t\t\tClear\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{input ? (\n\t\t\t\t<h2 className='font-extrabold mb-2'>\n\t\t\t\t\tSearch Results for {input && JSON.stringify(input, null, 2)}:\n\t\t\t\t</h2>\n\t\t\t) : (\n\t\t\t\t''\n\t\t\t)}\n\t\t\t{loading ? (\n\t\t\t\t<div className='font-black text-gray-700'>\n\t\t\t\t\tL o a d i n g r e s u l t s . . .\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<ul className='bg-white p-6'>\n\t\t\t\t\t{results.map((result) => (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName='bg-white py-2 font-extrabold border-b-2 border-grey-600'\n\t\t\t\t\t\t\tkey={result.objectID}\n\t\t\t\t\t\t\tid={result.objectID}>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName='text-gray-700 hover:text-gray-500'\n\t\t\t\t\t\t\t\thref={result.url}>\n\t\t\t\t\t\t\t\t{result.title}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t)}\n\t\t\t{error && <div>{error.message}</div>}\n\t\t</div>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n/* if (module.hot) {\n\tmodule.hot.accept();\n} */\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}